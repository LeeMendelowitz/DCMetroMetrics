./analysis/analyzeBreakTimes.py:from test import test_setup
./common/dbUtils.py:# Retrieve information about the latest statuses for all escalators
./common/dbUtils.py:def getLatestStatuses(escalators=False, elevators=False, dbg=None):
./common/dbUtils.py:        # Find latest 1000 statuses for this escalator
./common/dbUtils.py:    latestStatuses = getLatestStatuses(escalators=escalators, elevators=elevators, dbg=dbg)
./common/dbUtils.py:    N = len(latestStatuses)
./common/dbUtils.py:    lastStatuses = [d['lastStatus'] for d in latestStatuses.itervalues()]
./common/dbUtils.py:            'escToLatest' : latestStatuses,
./common/dbUtils.py:    def getLatestStatus(escUnitId):
./common/dbUtils.py:    escToLatest = dict((escUnitId, getLatestStatus(escUnitId)) for escUnitId in escUnitIds)
./common/dbUtils.py:    numWorking = sum(1 for s in escToLatest.itervalues() if s['symptomCategory']=='ON')
./common/dbUtils.py:           'escUnitIdToLatestStatus' : escToLatest,
./common/dbUtils.py:    # Find latest statuses for this escalator
./eles/ELESApp.py:    # Wrap a call to dbUtils.getLatestStatuses
./eles/ELESApp.py:    def getLatestStatuses(self):
./eles/ELESApp.py:        escStatusItems = self.getLatestStatuses().items()
./eles/elevator.py:    from test import test_setup
./eles/elevator.py:    def getLatestStatuses(self):
./eles/elevator.py:        return dbUtils.getLatestStatuses(elevators=True, dbg=self.dbg)
./eles/escalator.py:    from test import test_setup
./eles/escalator.py:    def getLatestStatuses(self):
./eles/escalator.py:        return dbUtils.getLatestStatuses(escalators=True, dbg=self.dbg)
./eles/escalator.py:            # Retrieve the latest statuses
./hotcars/hotCars.py:    # Get the latest tweets about WMATA hotcars. Ignore tweets which
./third_party/twitter.py:    '''Get the latest twitter.Status of this user.
./third_party/twitter.py:      The latest twitter.Status of this user
./third_party/twitter.py:    '''Set the latest twitter.Status of this user.
./third_party/twitter.py:        The latest twitter.Status of this user
./third_party/twitter.py:                    doc='The latest twitter.Status of this user.')
./third_party/twitter.py:    '''Set the latest twitter.geo_enabled of this user.
./third_party/twitter.py:    # Always return the latest version
./utils/fixHotCarColors.py:#from . import test.test_setup
./utils/fixHotCarColors.py:    print "Seems like this is not the OPENSHIFT environment. Importing test_setup."
./utils/fixHotCarColors.py:    import test_setup
./web/webPageGenerator.py:# Useful for testing. Call this after editing
./web/webPageGenerator.py:        latestStatus = statuses[0]
./web/webPageGenerator.py:               'curStatus' : latestStatus['symptom'],
./web/webPageGenerator.py:               'curSymptomCategory' : latestStatus['symptomCategory'],
